<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="partyMapper">

	<resultMap type="party" id="partyResultSet">
		<result column="PA_NO" property="paNo"></result>
		<result column="PA_NAME" property="paName"></result>
		<result column="TABLE_CD" property="tableCd"></result>
		<result column="OTT_NAME" property="ottName"></result>
		<result column="OTT_NO" property="ottNo"></result>
		<result column="PA_TITLE" property="paTitle"></result>
		<result column="CREW_NUM" property="crewNum"></result>
		<result column="OTT_ID" property="ottId"></result>
		<result column="OTT_PWD" property="ottPwd"></result>
		<result column="START_DATE" property="startDate"></result>
		<result column="END_DATE" property="endDate"></result>
		<result column="DAY_PRICE" property="dayPrice"></result>
		<result column="ACCOUNT" property="account"></result>
		<result column="STATUS" property="status"></result>
		<result column="LEFT_DATE" property="leftDate"></result>
		<result column="JOIN_NUM" property="joinNum"></result>
		<result column="TOTAL_PRICE" property="totalPrice"></result>
		<result column="MEM_NICKNAME" property="memNickname"></result>
		<result column="MEM_NO" property="memNo"></result>
		<result column="CHANGE_NAME" property="changeName"/>
		<result column="FILE_PATH" property="filePath"/>
		<result column="LIKE_COUNT" property="likeCount"/>
		<result column="BAD_COUNT" property="badCount"/>
		
		<result column="LIKE_SUM" property="likeSum"/>
		<result column="BAD_SUM" property="badSum"/>
	</resultMap>
	
	<resultMap type="partyJoin" id="partyJoinResultSet">
		<result column="PA_NO" property="paNo"></result>
		<result column="MEM_NO" property="memNo"></result>
		<result column="MEM_NICKNAME" property="memNickname"></result>
		<result column="JOIN_DATE" property="joinDate"></result>
		<result column="CHANGE_NAME" property="changeName"/>
		<result column="FILE_PATH" property="filePath"/>
	</resultMap>
	
	<resultMap type="partyEvaluate" id="partyEvaluateResultSet">
		<result column="PA_NO" property="paNO"/>
		<result column="MEM_NO" property="memNO"/>
		<result column="LIKE_COUNT" property="likeCount"/>
		<result column="BAD_COUNT" property="badCount"/>
		
	</resultMap>
	
	<resultMap type="reply" id="replyResultSet">
		<id column="REPLY_NO" property="replyNo"/>
		<result column="REPLY_CONTENT" property="replyContent"/>
		<result column="MEM_NICKNAME" property="replyWriter"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="REF_TNO" property="refTno"/>
		<result column="TABLE_CD" property="tableCd"/>
		<result column="STATUS" property="status"/>
		<result column="CHANGE_NAME" property="changeName"/>
		<result column="FILE_PATH" property="filePath"/>
	</resultMap>
	
	<select id="getPrice" parameterType="String" resultType="int">
		SELECT OTT_PRICE 
		FROM OTT 
		WHERE OTT_NO = #{ottNo}
	</select>

	<insert id="insertParty" parameterType="Party">
		INSERT INTO PARTY(
			PA_NO,
			PA_NAME,
			OTT_NO,
			PA_TITLE,
			CREW_NUM,
			OTT_ID,
			OTT_PWD,
			END_DATE,
			DAY_PRICE,
			ACCOUNT
		) VALUES(
			SEQ_PNO.NEXTVAL,
			#{paName},
			#{ottNo},
			#{paTitle},
			#{crewNum},
			#{ottId},
			#{ottPwd},
			#{endDate},
			#{dayPrice},
			#{account}
		)
	</insert>
	
	<select id="findPartyForm" resultMap="partyResultSet">
		SELECT P.PA_NO,
			   O.OTT_NAME,
			   PA_TITLE,
			   END_DATE,
			   TRUNC(END_DATE-SYSDATE+2,0) AS LEFT_DATE,
			   (SELECT COUNT(*)
                FROM PARTY_JOIN
                WHERE PA_NO = P.PA_NO) AS JOIN_NUM,
                PA_NAME,
                PJ.MEM_NO,
                M.MEM_NICKNAME
		FROM PARTY P
        JOIN OTT O USING(OTT_NO)
        JOIN PARTY_JOIN PJ ON(PJ.PA_NO = P.PA_NO)
        JOIN MEMBER M ON(PJ.MEM_NO = M.MEM_NO)
        WHERE P.STATUS = 'N'
	</select>
	
	<select id="findParty" parameterType="map" resultMap="partyResultSet">
		SELECT P.PA_NO,
			   O.OTT_NAME,
			   PA_TITLE,
			   END_DATE,
			   TRUNC(END_DATE-SYSDATE+2,0) AS LEFT_DATE,
			   (SELECT COUNT(*)
                FROM PARTY_JOIN
                WHERE PA_NO = P.PA_NO) AS JOIN_NUM,
                START_DATE
		FROM PARTY P
        JOIN OTT O USING(OTT_NO)
        WHERE P.STATUS = 'N'
        
        <if test="!ottList.isEmpty() or month != ''"> 
        	AND
       
			<if test="!ottList.isEmpty()">
	        	OTT_NO IN (${ottList})
	        </if>
	        
	        <if test="!ottList.isEmpty() and month != ''">
	        	AND 
	        </if>
	        
			<if test="month != ''">
	        <choose>
	        	<when test="month == '12' || month == '0'"> 
					1 = 1
	        	</when>
				<otherwise>
	        		<![CDATA[PA_NO IN (SELECT PA_NO FROM PARTY WHERE TRUNC(END_DATE-SYSDATE+2,0) < TO_NUMBER(#{month})*30)]]>
	        	</otherwise>
	        </choose>
	       </if>
	   </if>
	   ORDER BY START_DATE DESC
	</select>


		
	<select id="partyDetailForm" parameterType="int" resultMap="partyResultSet">
       SELECT OTT_NAME,
               PA_TITLE,
               PA_NAME,
               MEM_NICKNAME,
               PA_NO,
               END_DATE,
               START_DATE,
			   TRUNC(END_DATE-SYSDATE+2,0) AS LEFT_DATE,
               TRUNC(END_DATE-SYSDATE+2,0) * DAY_PRICE AS TOTAL_PRICE,
         	   I.CHANGE_NAME AS "CHANGE_NAME",
         	   I.FILE_PATH AS "FILE_PATH"
        FROM PARTY P
        LEFT JOIN OTT O USING(OTT_NO)
        LEFT JOIN MEMBER M ON (P.PA_NAME = M.MEM_NO)
	    LEFT JOIN IMAGE I ON(I.REF_TNO = PA_NAME) AND I.TABLE_CD='M'
        WHERE PA_NO = #{paNo}
	</select>
	
	<select id="partyJoinMem" parameterType="int" resultMap="partyJoinResultSet">
        SELECT MEM_NO,
        	   MEM_NICKNAME,
               JOIN_DATE,
         	   I.CHANGE_NAME AS "CHANGE_NAME",
         	   I.FILE_PATH AS "FILE_PATH"
        FROM PARTY_JOIN P
        JOIN MEMBER USING(MEM_NO)
	    LEFT JOIN IMAGE I ON(I.REF_TNO = MEM_NO) AND I.TABLE_CD= 'M'
        WHERE P.PA_NO = #{paNo}
	</select>
	
	<insert id="joinPartyMember" parameterType="PartyJoin">
		INSERT INTO PARTY_JOIN
		VALUES (#{paNo},#{memNo},SYSDATE)
	</insert>
	
	<select id="selectReply" parameterType="int" resultMap="replyResultSet">
	  SELECT 
         R.REF_TNO,
         R.REPLY_NO,
         R.REPLY_CONTENT,
         M.MEM_NICKNAME,
         R.CREATE_DATE,
         I.CHANGE_NAME AS "CHANGE_NAME",
         I.FILE_PATH AS "FILE_PATH"
      FROM REPLY R
      LEFT JOIN PARTY P ON (P.PA_NO = R.REF_TNO)
      LEFT JOIN MEMBER M  ON (R.REPLY_WRITER = M.MEM_NO)
	  LEFT JOIN IMAGE I ON(I.REF_TNO = R.REPLY_WRITER) AND I.TABLE_CD= 'M'
      WHERE P.PA_NO = #{paNo} AND  R.STATUS = 'N' AND R.TABLE_CD = 'P'
	</select>
	
	<insert id="insertReply" parameterType="reply" >
		INSERT INTO REPLY(REPLY_NO, REPLY_WRITER, REF_TNO, REPLY_CONTENT , TABLE_CD)
		VALUES (SEQ_RNO.NEXTVAL, #{replyWriter}, #{refTno}, #{replyContent} , 'P')
	</insert>
	
	<update id="endParty" parameterType="int">
		UPDATE PARTY
		SET STATUS = 'Y'
		WHERE PA_NO = #{paNo} AND STATUS = 'N'
	</update>

	<update id="deleteReply" parameterType="int">
		UPDATE REPLY
        SET STATUS = 'Y'
        WHERE REPLY_NO = #{rno}
	</update>
	
	<select id="currentPartyList" resultMap="partyResultSet">
		SELECT P.PA_NO,
			   O.OTT_NAME,
			   PA_TITLE,
			   END_DATE,
			   TRUNC(END_DATE-SYSDATE+2,0) AS LEFT_DATE
		FROM PARTY P
        JOIN OTT O USING(OTT_NO)
        WHERE STATUS = 'N'
    </select>
    
    <select id="endPartyList" resultMap="partyResultSet">
		SELECT P.PA_NO,
        	   M.MEM_NICKNAME,
			   O.OTT_NAME,
			   P.PA_TITLE,
			   P.END_DATE,
			   TRUNC(END_DATE-SYSDATE+2,0) AS LEFT_DATE,
               (SELECT SUM(LIKE_COUNT) FROM PARTY_EVALUATE WHERE PA_NO = P.PA_NO) AS LIKE_SUM,
               (SELECT SUM(BAD_COUNT) FROM PARTY_EVALUATE WHERE PA_NO = P.PA_NO) AS BAD_SUM
		FROM PARTY P
        JOIN OTT O USING(OTT_NO)
        JOIN MEMBER M ON (MEM_NO = PA_NAME) 
        WHERE P.STATUS = 'Y'
    </select>
    
	<select id="memCurrentPartyListI" parameterType="int" resultMap="partyResultSet">
		SELECT P.PA_NO,
			   O.OTT_NAME,
			   PA_TITLE,
			   END_DATE,
			   TRUNC(END_DATE-SYSDATE+2,0) AS LEFT_DATE,
			   OTT_ID,
			   OTT_PWD
		FROM PARTY P
        JOIN OTT O USING(OTT_NO)
        WHERE STATUS = 'N' AND PA_NAME = #{memNo}
    </select>
    
        
	<select id="memCurrentPartyListO" parameterType="int" resultMap="partyResultSet">
		SELECT PA_NO,
			   O.OTT_NAME,
			   P.PA_TITLE,
			   P.END_DATE,
			   TRUNC(END_DATE-SYSDATE+2,0) AS LEFT_DATE,
			   OTT_ID,
			   OTT_PWD
		FROM PARTY P
        JOIN OTT O USING(OTT_NO)
        WHERE P.STATUS = 'N' AND PA_NAME != #{memNo}
          AND PA_NO IN (SELECT DISTINCT(PA_NO) FROM PARTY_JOIN WHERE MEM_NO = #{memNo})
    </select>
    
    <select id="memEndPartyListI" parameterType="int" resultMap="partyResultSet">
		SELECT P.PA_NO,
			   O.OTT_NAME,
			   PA_TITLE,
			   END_DATE,
			   TRUNC(END_DATE-SYSDATE+2,0) AS LEFT_DATE
		FROM PARTY P
        JOIN OTT O USING(OTT_NO)
        WHERE STATUS = 'Y' AND PA_NAME = #{memNo}
    </select>
    
	<select id="memEndPartyListO" parameterType="int" resultMap="partyResultSet">
		SELECT PA_NO,
        	   M.MEM_NICKNAME,
			   O.OTT_NAME,
			   P.PA_TITLE,
			   P.END_DATE,
			   TRUNC(END_DATE-SYSDATE+2,0) AS LEFT_DATE
		FROM PARTY P
        JOIN OTT O USING(OTT_NO)
        JOIN MEMBER M ON (MEM_NO = PA_NAME)
        WHERE P.STATUS = 'Y' AND PA_NAME != #{memNo}
          AND PA_NO IN (SELECT DISTINCT(PA_NO) FROM PARTY_JOIN WHERE MEM_NO = #{memNo})
    </select>
	
	<select id="checkPartyEvaluate" parameterType="partyEvaluate" resultType="int">
		SELECT COUNT(*)
		FROM PARTY_EVALUATE
		WHERE MEM_NO = #{memNo} AND PA_NO = #{paNo}
	</select>
	
	<insert id="partyLikeEvaluate" parameterType="partyEvaluate">
		INSERT INTO PARTY_EVALUATE
		VALUES (#{paNo}, #{memNo}, 1, 0)
	</insert>
	
	<insert id="partyBadEvaluate" parameterType="partyEvaluate">
		INSERT INTO PARTY_EVALUATE
		VALUES (#{paNo}, #{memNo}, 0, 1)
	</insert>

	<update id="blackCheck" parameterType="partyEvaluate">
		UPDATE MEMBER
		SET B_STATUS = 'Y'
		WHERE E_COUNT &lt; -10
	</update>
	
	<update id="memberLikeEvaluate">
		UPDATE MEMBER
		SET E_COUNT = E_COUNT +1
		WHERE MEM_NO IN (SELECT PA_NAME
						 FROM PARTY
						 WHERE PA_NO = #{paNo})
	</update>
	
	<update id="memberBadEvaluate">
		UPDATE MEMBER
		SET E_COUNT = E_COUNT -1
		WHERE MEM_NO IN (SELECT PA_NAME
						 FROM PARTY
						 WHERE PA_NO = #{paNo})
	</update>





</mapper>